name: 'my_new_project'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'default'

#----- PATHS -----#
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"

#----- GLOBAL VARIABLES -----#
vars:
  dbt_table_schemas: ['DBT_SNAPSHOTS', 'DBT_MART'] # table schemas that dbt creates
  data_retention_days: 90 # used for snapshot cut-off

  # roles to compare to determine local development run vs official run
  executing_role: '{{ target.role | upper }}'
  dbt_service_user_role: '{{ target.name | upper }}_DBT'


#----- RUN START/END ----- #
# before run, if dbt is being executed by cloud job, ensure rollback schemas exist first for persistent table objects (mart tables and snapshot tables)
on-run-start: >
  {% if var('executing_role') == var('dbt_service_user_role') %}
    {% for dbt_table_schema in var('dbt_table_schemas') %}
      CREATE SCHEMA IF NOT EXISTS {{ dbt_table_schema }}_ROLLBACK;
    {% endfor %}
  {% endif %}

# after run, if dbt is being executed by cloud job, grant usage on created schemas to environment's read-only role
# "schemas" keyword refers to each schema in which an object was built during the current run 
on-run-end: >
  {% if var('executing_role') == var('dbt_service_user_role') %}
    {% for schema in schema %}
      GRANT USAGE ON SCHEMA {{ schema }} TO ROLE {{ target.name }}_RO;
    {% endfor %}
  {% endif %}

#----- MODELS -----#
models:
  my_new_project:
    +persist_docs: # adds model and column descriptions from YML files to created objects in Snowflake
      relation: true
      columns: true

    example:
      +materialized: view

    # Staging layer
    stg:
      +schema: stg  # created as [PERSONAL SCHEMA]_STG
      +materialized: view

    # Intermediate layer
    int:
      +schema: int  # created as [PERSONAL SCHEMA]_INT
      +materialized: view

    # Mart layer
    mart:
      +schema: mart  # created as [PERSONAL SCHEMA]_MART
      +materialized: table

      # before build, clone table (if it already exists) to allow rolling back if needed
      +pre-hook: >
        {% if var('executing_role') == var('dbt_service_user_role') 
          and adapter.get_relation(database=this.database, schema=this.schema, identifier=this.identifier) is not none
        %}
          CREATE OR REPLACE TABLE {{ this.schema }}_ROLLBACK.{{ this.identifier }} CLONE {{ this }};
        {% endif %}
      
      # after build, keep grants up-to-date for environment's read-only role
      +post-hook: >
        GRANT SELECT ON {{ this }} TO ROLE {{ target.name }}_RO

#----- SNAPSHOTS -----#
snapshots:
  my_new_project:
    +target_schema: dbt_snapshots
    +full_refresh: false
    +invalidate_hard_deletes: true
    +transient: false
    +persist_docs: # adds model and column descriptions from YML files to created objects in Snowflake
      relation: true
      columns: true

    # before build, clone table (if it already exists) to allow rolling back if needed
    +pre-hook: >
      {% if var('executing_role') == var('dbt_service_user_role') 
        and adapter.get_relation(database=this.database, schema=this.schema, identifier=this.identifier) is not none
      %}
        CREATE OR REPLACE TABLE {{ this.schema }}_ROLLBACK.{{ this.identifier }} CLONE {{ this }};
      {% endif %}
      
    # after build, keep grants up-to-date for environment's read-only role
    +post-hook: >
      GRANT SELECT ON {{ this }} TO ROLE {{ target.name }}_RO


#----- SEEDS -----#
seeds:
  my_new_project:
    +schema: seed # created as [PERSONAL SCHEMA]_SEED
    +persist_docs: # adds model and column descriptions from YML files to created objects in Snowflake
      relation: true
      columns: true
      
    # after build, keep grants up-to-date for environment's read-only role
    +post-hook: >
      GRANT SELECT ON {{ this }} TO ROLE {{ target.name }}_RO